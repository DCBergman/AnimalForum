[{"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Subforum.js":"4","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\context\\ForumContextProvider.js":"5","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Thread.js":"6","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadsList.js":"7","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Header.js":"8","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\RegisterAccount.js":"9","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\LoginPage.js":"10","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadPage.js":"11","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Post.js":"12","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\AdminPage.js":"13","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\User.js":"14"},{"size":547,"mtime":1609082025439,"results":"15","hashOfConfig":"16"},{"size":1220,"mtime":1610357373868,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":998,"mtime":1610288855670,"results":"19","hashOfConfig":"16"},{"size":2929,"mtime":1610372140197,"results":"20","hashOfConfig":"16"},{"size":811,"mtime":1610289070789,"results":"21","hashOfConfig":"16"},{"size":1454,"mtime":1610288731775,"results":"22","hashOfConfig":"16"},{"size":2604,"mtime":1610288995455,"results":"23","hashOfConfig":"16"},{"size":2924,"mtime":1610288808791,"results":"24","hashOfConfig":"16"},{"size":2458,"mtime":1609934745723,"results":"25","hashOfConfig":"16"},{"size":5248,"mtime":1610355364640,"results":"26","hashOfConfig":"16"},{"size":1945,"mtime":1610288722286,"results":"27","hashOfConfig":"16"},{"size":1693,"mtime":1610374211877,"results":"28","hashOfConfig":"16"},{"size":2173,"mtime":1610384182122,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"etiz7t",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\index.js",[],["64","65"],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Subforum.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\context\\ForumContextProvider.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Thread.js",["66"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst Thread = (props) => {\r\n  const [creator, setCreator] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    getCreator();\r\n    console.log(props);\r\n  },[])\r\n\r\n\r\n  const getCreator = async() =>{\r\n        let fetchedCreator = await fetch(\"/api/users/\" + props.thread.creator,{\r\n          method: 'GET',\r\n          credentials: 'include'\r\n        });\r\n        setCreator(await fetchedCreator.json());\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"thread-div\">\r\n      <p className=\"thread-title\">{props.thread.title}</p>\r\n      <div className=\"thread-bottom-row\">\r\n        <p className=\"thread-date\">{props.thread.date}</p>\r\n        <p className=\"thread-creator\">{creator.username}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\nexport default Thread; ","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadsList.js",["67"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Thread from \"../components/Thread\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst ThreadsList = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const history = useHistory();\r\n  const [threads, setThreads] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAllThreadsFromSubforum();\r\n  }, []);\r\n\r\n  async function goToPage(t) {\r\n    await forumContext.fetchThreadById(t.id);\r\n    console.log(\"clicked\");\r\n    history.push({\r\n      pathname: \"/threads/\" + props.match.params.subforumId + \"/\" + t.id,\r\n      state:{\r\n        thread:t,\r\n      },\r\n    });\r\n  }\r\n\r\n  const fetchAllThreadsFromSubforum = async () => {\r\n    let threads = await fetch(\r\n      \"/api/subforums/threads/\" + props.match.params.subforumId,\r\n      {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n      }\r\n    );\r\n    console.log(\"context \", threads);\r\n    threads = await threads.json();\r\n\r\n    console.log(threads);\r\n    setThreads(threads);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(threads);\r\n  }, [threads]);\r\n\r\n  return (\r\n    <div className=\"threads-list\">\r\n      {threads.map((t, i) => (\r\n        <div key={i} onClick={() => goToPage(t)}>\r\n          <Thread\r\n            thread={t}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default ThreadsList;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Header.js",["68","69"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Switch, useHistory } from \"react-router-dom\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst Header = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [role, setRole] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n  \r\n  setLoggedIn(forumContext.isLoggedIn);\r\n  getUserRole();\r\n   \r\n  },[forumContext.isLoggedIn])\r\n\r\n  // const isLoggedIn = async () => {\r\n  //    let response = await fetch(\"localhost:3000/api/login\");\r\n  //   console.log(\"login \", response);\r\n  //   response = await response.json();\r\n  //   console.log(\"login \", response);\r\n  // }\r\n  const getUserRole = async () => {\r\n    let user = await forumContext.fetchLoggedInUser();\r\n    if(user !== null){\r\n      setRole(user.userRole);\r\n    }else{\r\n      setLoggedIn(false);\r\n    }\r\n  }\r\n  const logout = async () => {\r\n    await fetch(\r\n          \"/api/login\", \r\n          {\r\n            method: \"DELETE\",\r\n            credentials: \"include\",\r\n          }\r\n        );\r\n        forumContext.setIsLoggedIn(false);\r\n        setLoggedIn(false);\r\n        history.push(\"/\");\r\n  } \r\n  function routeToHomepage(){\r\n    history.push(\"/\");\r\n  } \r\n  function routeToLogin(){\r\n    history.push(\"/login\");\r\n  } \r\n  function routeToRegister(){\r\n    history.push(\"/register\");\r\n  } \r\n\r\n  function SwitchCase(props){\r\n    switch(props.role){\r\n      case \"basicUser\":\r\n        return \"\";\r\n      case \"admin\":\r\n        return (\r\n          <section className=\"header-p\" >\r\n            Admin\r\n          </section>\r\n        );\r\n      case \"moderator\":\r\n        return (\r\n          <section className=\"header-p\" >\r\n            My Forums\r\n          </section>\r\n        );\r\n        default:\r\n          return\"\";\r\n    \r\n    }\r\n\r\n  }\r\n  return (\r\n    <div className=\"header-div\">\r\n      <section className=\"header-title\" onClick={routeToHomepage}>\r\n        Animal Forum\r\n      </section>\r\n      {loggedIn ? (\r\n        <div className=\"header-right-aligned\">\r\n          <SwitchCase role={role} />\r\n          <section className=\"header-p\" onClick={logout}>Logout</section>\r\n        </div>\r\n      ) : (\r\n        <div className=\"header-right-aligned\">\r\n          <section className=\"header-p\" onClick={routeToLogin}>\r\n            Login\r\n          </section>\r\n\r\n          <section className=\"header-p\" onClick={routeToRegister}>\r\n            Register\r\n          </section>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\RegisterAccount.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\LoginPage.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadPage.js",["70","71","72"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport { FaLock, FaLockOpen } from \"react-icons/fa\";\r\nimport Post from \"../components/Post\";\r\nimport \"../index.css\";\r\nimport { Button, Col, Input, Label, Row } from \"reactstrap\";\r\n\r\nconst ThreadPage = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const [user, setUser] = useState([]);\r\n  const [content, setContent] = useState(\"\");\r\n  const [isOpen, setIsOpen] = useState(\"\");\r\n  const [thread, setThread] = useState([]);\r\n  const [warning, setWarning] = useState(false);\r\n  const [postEnabled, setPostEnabled] = useState(\"\");\r\n  const [isModAdmin, setIsModAdmin] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log(forumContext.thread.isOpen);\r\n    if (forumContext.thread.isOpen !== undefined) {\r\n      localStorage.setItem(\"thread-status\", forumContext.thread.isOpen);\r\n    }\r\n    if (localStorage.getItem(\"thread-status\")!== undefined){\r\n      setIsOpen(\r\n        localStorage.getItem(\"thread-status\", forumContext.thread.isOpen)\r\n      );\r\n    }\r\n      console.log(isOpen);\r\n    setThread(forumContext.thread);\r\n    fetchData();\r\n  }, []);\r\n\r\n  async function fetchData() {\r\n    await forumContext.fetchPostsByThreadId(props.match.params.threadId);\r\n    setUser(await forumContext.fetchLoggedInUser());\r\n  }\r\n  useEffect(() => {\r\n    setIsOpen(forumContext.thread.isOpen);\r\n  }, [forumContext.thread]);\r\n  \r\n  useEffect(() => {\r\n   if(user){\r\n     if(user.userRole ===\"basicUser\" && isOpen){\r\n       setPostEnabled(true);\r\n     }else if (user.userRole === \"admin\"|| \"moderator\"){\r\n       setPostEnabled(true);\r\n       setIsModAdmin(true);\r\n     }else{\r\n       setPostEnabled(false);\r\n     }\r\n   }else{\r\n     setPostEnabled(false);\r\n   }\r\n  }, [user]);\r\n\r\n  async function updateStatus() {\r\n    let status = localStorage.getItem(\"thread-status\");\r\n    let id = props.match.params.threadId;\r\n    console.log(status);\r\n\r\n    if(status === \"true\"){\r\n      setIsOpen(false);\r\n      forumContext.changeThreadStatus(id, \"false\");\r\n    }else if(status===\"false\"){\r\n      setIsOpen(true);\r\n      forumContext.changeThreadStatus(id, \"true\");\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    console.log(isOpen);\r\n  }, [isOpen]);\r\n\r\n  async function createPost(e) {\r\n    e.preventDefault();\r\n\r\n    let type = \"\";\r\n    if (warning) {\r\n      type = \"warning\";\r\n    } else {\r\n      type = \"normal\";\r\n    }\r\n\r\n    let userId = user.id;\r\n    let threadId = props.match.params.threadId;\r\n    let date = Date.now();\r\n\r\n    const credentials = {\r\n      threadId,\r\n      userId,\r\n      content,\r\n      type,\r\n      date,\r\n    };\r\n    console.log(\"creds\", credentials);\r\n\r\n    let response = await fetch(\"/api/posts\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n      setContent(\"\");\r\n      //setUser(response)\r\n      // props.history.push(\"/\");\r\n    } catch {\r\n      console.log(\"Bad credentials\");\r\n    }\r\n    await forumContext.fetchPostsByThreadId(props.match.params.threadId);\r\n  }\r\n  // useEffect(() => {\r\n  //   console.log(forumContext.posts);\r\n  // }, [forumContext.posts]);\r\n\r\n  return (\r\n    <div className=\"thread-page-div\">\r\n      {forumContext.posts.map((p, i) => (\r\n        <Post post={p} key={i} />\r\n      ))}\r\n\r\n      {postEnabled\r\n      ? (\r\n        <div className=\"post-form\">\r\n          <Row>\r\n            <Col sm={{ size: 7, offset: 0 }}>\r\n              <Input\r\n                value={content}\r\n                type=\"textarea\"\r\n                onChange={(e) => setContent(e.target.value)}\r\n                className=\"post-input\"\r\n              />\r\n            </Col>\r\n            <Col className=\"checkbox-col\" sm={{ size: \"auto\" }}>\r\n              {(isModAdmin) && (\r\n                <div>\r\n                  <Row>\r\n                    <Label check>\r\n                      <Input\r\n                        type=\"checkbox\"\r\n                        onChange={() => setWarning(!warning)}\r\n                      />{\" \"}\r\n                      Check to create warning post\r\n                    </Label>\r\n                  </Row>\r\n                  <Row>\r\n                    <Button className=\"lock-btn\" onClick={() => updateStatus()}>\r\n                      {isOpen ? (\r\n                        <div className=\"lock-btn-div\">\r\n                          Lock thread\r\n                          <FaLockOpen className=\"lock-icon\" />\r\n                        </div>\r\n                      ) : (\r\n                        <div className=\"lock-btn-div\">\r\n                          Unlock thread\r\n                          <FaLock className=\"lock-icon\" />\r\n                        </div>\r\n                      )}\r\n                    </Button>\r\n                  </Row>\r\n                </div>\r\n              )}\r\n            </Col>\r\n          </Row>\r\n          <Col className=\"btn-col\" sm={{ size: 10 }}>\r\n            <Button className=\"post-button\" onClick={createPost}>\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ThreadPage;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Post.js",["73"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, ListGroupItem } from \"reactstrap\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst Post = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const [user, setUser] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n   formatDate();\r\n   fetchData();\r\n    \r\n  }, []);\r\n\r\n  const formatDate =() =>{\r\n    let date_ob = new Date(props.post.date);\r\n\r\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\r\n\r\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\r\n\r\n    let year = date_ob.getFullYear();\r\n\r\n    let hours = date_ob.getHours();\r\n\r\n    let minutes = date_ob.getMinutes();\r\n\r\n\r\n    setDate(\r\n      year +\r\n        \"-\" +\r\n        month +\r\n        \"-\" +\r\n        date +\r\n        \" \" +\r\n        hours +\r\n        \":\" +\r\n        minutes \r\n    );\r\n  }\r\n\r\n  async function deletePost(){\r\n      await fetch(\"/api/posts/\" + props.post.id, {\r\n       method: \"DELETE\"\r\n     });\r\n     forumContext.fetchPostsByThreadId(props.post.threadId);\r\n  }\r\n\r\n  async function fetchData(){\r\n\r\n     let response = await fetch(\"/api/users/\" + props.post.userId, {\r\n       method: \"GET\",\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n     try {\r\n       response = await response.json();\r\n       setUser(response);\r\n     } catch {\r\n       console.log(\"Bad credentials\");\r\n     }\r\n\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <ListGroupItem className={props.post.type}>\r\n      <div className=\"post-top-row\">\r\n        <p className=\"post-creator\">{user.username}</p>\r\n        <p className=\"post-date\">{date}</p>\r\n      </div>\r\n      <div className=\"post-bottom-row\">\r\n        <p className=\"post-text\">{props.post.content}</p>\r\n        <Button className=\"post-delete-btn\" onClick={deletePost}>Delete</Button>\r\n      </div>\r\n    </ListGroupItem>\r\n  );\r\n};\r\nexport default Post;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\AdminPage.js",["74"],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\User.js",["75","76"],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":5,"nodeType":"83","endLine":10,"endColumn":7,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":14,"column":6,"nodeType":"83","endLine":14,"endColumn":8,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":2,"column":10,"nodeType":"89","messageId":"90","endLine":2,"endColumn":16},{"ruleId":"81","severity":1,"message":"91","line":17,"column":5,"nodeType":"83","endLine":17,"endColumn":30,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"93","line":13,"column":10,"nodeType":"89","messageId":"90","endLine":13,"endColumn":16},{"ruleId":"81","severity":1,"message":"94","line":31,"column":6,"nodeType":"83","endLine":31,"endColumn":8,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"96","line":54,"column":6,"nodeType":"83","endLine":54,"endColumn":12,"suggestions":"97"},{"ruleId":"81","severity":1,"message":"98","line":17,"column":6,"nodeType":"83","endLine":17,"endColumn":8,"suggestions":"99"},{"ruleId":"81","severity":1,"message":"100","line":14,"column":5,"nodeType":"83","endLine":14,"endColumn":7,"suggestions":"101"},{"ruleId":"87","severity":1,"message":"102","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":27},{"ruleId":"81","severity":1,"message":"103","line":15,"column":5,"nodeType":"83","endLine":15,"endColumn":7,"suggestions":"104"},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getCreator' and 'props'. Either include them or remove the dependency array.","ArrayExpression",["107"],"React Hook useEffect has a missing dependency: 'fetchAllThreadsFromSubforum'. Either include it or remove the dependency array.",["108"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'getUserRole'. Either include it or remove the dependency array.",["109"],"'thread' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'forumContext.thread', and 'isOpen'. Either include them or remove the dependency array.",["110"],"React Hook useEffect has a missing dependency: 'isOpen'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has missing dependencies: 'fetchData' and 'formatDate'. Either include them or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'forumContext'. Either include it or remove the dependency array.",["113"],"'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'props.user'. Either include it or remove the dependency array.",["114"],"no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},{"desc":"127","fix":"128"},{"desc":"129","fix":"130"},"Update the dependencies array to be: [getCreator, props]",{"range":"131","text":"132"},"Update the dependencies array to be: [fetchAllThreadsFromSubforum]",{"range":"133","text":"134"},"Update the dependencies array to be: [forumContext.isLoggedIn, getUserRole]",{"range":"135","text":"136"},"Update the dependencies array to be: [fetchData, forumContext.thread, isOpen]",{"range":"137","text":"138"},"Update the dependencies array to be: [isOpen, user]",{"range":"139","text":"140"},"Update the dependencies array to be: [fetchData, formatDate]",{"range":"141","text":"142"},"Update the dependencies array to be: [forumContext]",{"range":"143","text":"144"},"Update the dependencies array to be: [props.user]",{"range":"145","text":"146"},[224,226],"[getCreator, props]",[476,478],"[fetchAllThreadsFromSubforum]",[512,537],"[forumContext.isLoggedIn, getUserRole]",[1197,1199],"[fetchData, forumContext.thread, isOpen]",[1805,1811],"[isOpen, user]",[443,445],"[fetchData, formatDate]",[475,477],"[forumContext]",[417,419],"[props.user]"]