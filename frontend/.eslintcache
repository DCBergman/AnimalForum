[{"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\index.js":"1","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\App.js":"2","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Subforum.js":"4","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\context\\ForumContextProvider.js":"5","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Thread.js":"6","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadsList.js":"7","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Header.js":"8","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\RegisterAccount.js":"9","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\LoginPage.js":"10","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadPage.js":"11","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Post.js":"12","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\AdminPage.js":"13","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\User.js":"14","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\EditModal.js":"15"},{"size":547,"mtime":1609082025439,"results":"16","hashOfConfig":"17"},{"size":1283,"mtime":1610999612180,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":1000,"mtime":1610486649387,"results":"20","hashOfConfig":"17"},{"size":5506,"mtime":1611000494157,"results":"21","hashOfConfig":"17"},{"size":1264,"mtime":1610999612181,"results":"22","hashOfConfig":"17"},{"size":3542,"mtime":1610486610723,"results":"23","hashOfConfig":"17"},{"size":2715,"mtime":1610999348686,"results":"24","hashOfConfig":"17"},{"size":2924,"mtime":1610288808791,"results":"25","hashOfConfig":"17"},{"size":2458,"mtime":1609934745723,"results":"26","hashOfConfig":"17"},{"size":6379,"mtime":1611070190041,"results":"27","hashOfConfig":"17"},{"size":1945,"mtime":1610288722286,"results":"28","hashOfConfig":"17"},{"size":1851,"mtime":1610458967410,"results":"29","hashOfConfig":"17"},{"size":1338,"mtime":1610442538691,"results":"30","hashOfConfig":"17"},{"size":5028,"mtime":1610490157590,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"etiz7t",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\index.js",[],["71","72"],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\App.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Subforum.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\context\\ForumContextProvider.js",["73"],"import React, { createContext, useState } from \"react\";\r\nexport const ForumContext = createContext();\r\n\r\nconst ForumContextProvider = (props) => {\r\n  const [subforums, setSubforums] = useState([]);\r\n  const [isLoggedIn, setIsLoggedIn] = useState([]);\r\n  const [thread, setThread] = useState([]);\r\n  const [moderators, setModerators] = useState([]);\r\n  const [currentModForums, setCurrentModForums] = useState([]);\r\n  const [posts, setPosts] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [currentSubforum, setCurrentSubforum] = useState(null);\r\n\r\n  const fetchAllSubforums = async () => {\r\n    let subforums = await fetch(\"/api/subforums\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    subforums = await subforums.json();\r\n\r\n    setSubforums(subforums);\r\n  };\r\n  const fetchAllUsers = async () => {\r\n    let response = await fetch(\"/api/users\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    response = await response.json();\r\n\r\n    setUsers(response);\r\n  };\r\n  const fetchAllModerators = async () => {\r\n    let response = await fetch(\"/api/moderators\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    response = await response.json();\r\n\r\n    return response;\r\n  };\r\n\r\n  const fetchLoggedInUser = async () => {\r\n    let response = await fetch(\"/api/login\", {\r\n      method: \"GET\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    try {\r\n      response = await response.json();\r\n      if (response !== null) {\r\n        return response;\r\n      } else {\r\n        return null;\r\n      }\r\n    } catch {\r\n      console.log(\"Bad credentials\");\r\n    }\r\n  };\r\n\r\n  const fetchPostsByThreadId = async (threadId) => {\r\n    let posts = await fetch(\"/api/posts/\" + threadId, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    posts = await posts.json();\r\n    setPosts(posts);\r\n  };\r\n  // const fetchThreadsBySubforumId = async (subforumId) => {\r\n  //   let posts = await fetch(\"/api/posts/\" + threadId, {\r\n  //     method: \"GET\",\r\n  //     credentials: \"include\",\r\n  //   });\r\n  //   posts = await posts.json();\r\n  // };\r\n\r\n  const fetchThreadById = async (id) => {\r\n    let response = await fetch(\"/api/threads/\" + id, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    response = await response.json();\r\n\r\n    setThread(response);\r\n  };\r\n\r\n  const fetchSubforumByModeratorId = async (id) => {\r\n    let response = await fetch(\"/api/subforums/user/\" + id, {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    try{\r\n      response = await response.json();\r\n      console.log(response.filter((r) => r.id));\r\n      setCurrentModForums(response.filter((r) => r.id));\r\n    }catch{\r\n      console.log(\"error\");\r\n    }\r\n\r\n  }\r\n  const addModeratorToSubforum = async (userId, subforumId) => {\r\n    let response = await fetch(\"/api/moderators/\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({subforumId:subforumId, userId: userId}),\r\n    });\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n      changeUserRole(userId, \"moderator\");\r\n    } catch {\r\n      console.log(\"Error\");\r\n    }\r\n  };\r\n\r\n  const deleteUser = async (id) => {\r\n    let response = await fetch(\"/api/users/\" + id, {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n    } catch {\r\n      console.log(\"Error\");\r\n    }\r\n  };\r\n\r\n  const removeModeratorfromSubforum = async (subforumId, userId) => {\r\n    let response = await fetch(\"/api/moderators/\" + subforumId + \"/\" + userId, {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n    } catch {\r\n      console.log(\"Error\");\r\n    }\r\n  };\r\n\r\n  const changeUserRole = async (id, userRole) => {\r\n    let response = await fetch(\"/api/users/\" + id, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ userRole: userRole }),\r\n    });\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n      //setThread(response);\r\n    } catch {\r\n      console.log(\"Bad credentials\");\r\n    }\r\n  };\r\n  const changeThreadStatus = async (id, isOpen) => {\r\n    let response = await fetch(\"/api/threads/\" + id, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ isOpen: isOpen }),\r\n    });\r\n    try {\r\n      localStorage.setItem(\"thread-status\", isOpen);\r\n      response = await response.json();\r\n      console.log(response);\r\n      //setThread(response);\r\n    } catch {\r\n      console.log(\"Bad credentials\");\r\n    }\r\n  };\r\n\r\n  const values = {\r\n    subforums,\r\n    currentSubforum,\r\n    isLoggedIn,\r\n    posts,\r\n    thread,\r\n    users,\r\n    moderators,\r\n    currentModForums,\r\n    fetchAllSubforums,\r\n    fetchAllUsers,\r\n    fetchAllModerators,\r\n    setCurrentSubforum,\r\n    fetchPostsByThreadId,\r\n    fetchSubforumByModeratorId,\r\n    fetchLoggedInUser,\r\n    setIsLoggedIn,\r\n    fetchThreadById,\r\n    addModeratorToSubforum,\r\n    deleteUser,\r\n    changeUserRole,\r\n    changeThreadStatus,\r\n    removeModeratorfromSubforum\r\n  };\r\n\r\n  return (\r\n    <ForumContext.Provider value={values}>\r\n      {props.children}\r\n    </ForumContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ForumContextProvider;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Thread.js",["74"],"import React, { useEffect, useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst Thread = (props) => {\r\n  const [creator, setCreator] = useState([]);\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  useEffect(()=>{\r\n    getCreator();\r\n    formatDate();\r\n    console.log(props);\r\n  },[])\r\n\r\n  const formatDate = () => {\r\n    let date_ob = new Date(props.thread.date);\r\n\r\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\r\n\r\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\r\n\r\n    let year = date_ob.getFullYear();\r\n\r\n    let hours = date_ob.getHours();\r\n\r\n    let minutes = date_ob.getMinutes();\r\n\r\n    setDate(year + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes);\r\n  };\r\n\r\n\r\n  const getCreator = async() =>{\r\n        let fetchedCreator = await fetch(\"/api/users/\" + props.thread.creator,{\r\n          method: 'GET',\r\n          credentials: 'include'\r\n        });\r\n        setCreator(await fetchedCreator.json());\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"thread-div\">\r\n      <p className=\"thread-title\">{props.thread.title}</p>\r\n      <div className=\"thread-bottom-row\">\r\n        <p className=\"thread-date\">{date}</p>\r\n        <p className=\"thread-creator\">{creator.username}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\nexport default Thread; ","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadsList.js",["75"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Col, Form, Input, Row } from \"reactstrap\";\r\nimport Thread from \"../components/Thread\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst ThreadsList = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const history = useHistory();\r\n  const [threads, setThreads] = useState([]);\r\n   const [title, setTitle] = useState(\"\");\r\n   const [description, setDescription] = useState(\"\");\r\n   const [user, setUser] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchAllThreadsFromSubforum();\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData=async()=>{\r\n    \r\n    setUser(await forumContext.fetchLoggedInUser());\r\n  }\r\n\r\n  async function createThread(e) {\r\n    e.preventDefault();\r\n\r\n    console.log(user);\r\n\r\n    let creator = user.id;\r\n    let subforumId = props.match.params.subforumId;\r\n    let date = Date.now();\r\n    let isOpen = \"true\";\r\n\r\n    const credentials = {\r\n      creator,\r\n      title,\r\n      description,\r\n      date,\r\n      isOpen,\r\n      subforumId,\r\n    };\r\n    let response = await fetch(\"/api/threads\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(credentials),\r\n    });\r\n\r\n    try {\r\n      response = await response.json();\r\n      console.log(response);\r\n      setDescription(\"\");\r\n      setTitle(\"\");\r\n      //setUser(response)\r\n      // props.history.push(\"/\");\r\n    } catch {\r\n      console.log(\"Bad credentials\");\r\n    }\r\n    fetchAllThreadsFromSubforum();\r\n  }\r\n\r\n\r\n  async function goToPage(t) {\r\n    await forumContext.fetchThreadById(t.id);\r\n    history.push({\r\n      pathname: \"/threads/\" + props.match.params.subforumId + \"/\" + t.id,\r\n      state:{\r\n        thread:t,\r\n      },\r\n    });\r\n  }\r\n\r\n  const fetchAllThreadsFromSubforum = async () => {\r\n    let threads = await fetch(\r\n      \"/api/subforums/threads/\" + props.match.params.subforumId,\r\n      {\r\n        method: \"GET\",\r\n        credentials: \"include\",\r\n      }\r\n    );\r\n    console.log(\"context \", threads);\r\n    threads = await threads.json();\r\n\r\n    console.log(threads);\r\n    setThreads(threads);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(threads);\r\n  }, [threads]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"threads-list\">\r\n        {threads.map((t, i) => (\r\n          <div key={i} onClick={() => goToPage(t)}>\r\n            <Thread thread={t} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {user ? (\r\n        <Form className=\"create-thread-form\">\r\n          <Row>\r\n            <Input\r\n              className=\"thread-title-input\"\r\n              type=\"text\"\r\n              value={title}\r\n              onChange={(e) => setTitle(e.target.value)}\r\n              placeholder=\"Thread title\"\r\n            />\r\n          </Row>\r\n          <Row>\r\n            <Col sm={{ size: 7, offset: 0 }}>\r\n              <Input\r\n                type=\"textarea\"\r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                placeholder=\"Add thread description\"\r\n                className=\"post-input\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Col className=\"btn-col\" sm={{ size: 10 }}>\r\n            <Button className=\"post-button\" onClick={createThread}>\r\n              Submit\r\n            </Button>\r\n          </Col>\r\n        </Form>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default ThreadsList;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Header.js",["76","77"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Switch, useHistory } from \"react-router-dom\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst Header = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const [loggedIn, setLoggedIn] = useState(false);\r\n  const [role, setRole] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n  \r\n  setLoggedIn(forumContext.isLoggedIn);\r\n  getUserRole();\r\n   \r\n  },[forumContext.isLoggedIn])\r\n\r\n  // const isLoggedIn = async () => {\r\n  //    let response = await fetch(\"localhost:3000/api/login\");\r\n  //   console.log(\"login \", response);\r\n  //   response = await response.json();\r\n  //   console.log(\"login \", response);\r\n  // }\r\n  const getUserRole = async () => {\r\n    let user = await forumContext.fetchLoggedInUser();\r\n    if(user !== null){\r\n      setRole(user.userRole);\r\n    }else{\r\n      setLoggedIn(false);\r\n    }\r\n  }\r\n  const logout = async () => {\r\n    await fetch(\r\n          \"/api/login\", \r\n          {\r\n            method: \"DELETE\",\r\n            credentials: \"include\",\r\n          }\r\n        );\r\n        forumContext.setIsLoggedIn(false);\r\n        setLoggedIn(false);\r\n        history.push(\"/\");\r\n  } \r\n  \r\n  function routeToHomepage(){\r\n    history.push(\"/\");\r\n  } \r\n  function routeToLogin(){\r\n    history.push(\"/login\");\r\n  } \r\n  function routeToRegister(){\r\n    history.push(\"/register\");\r\n  } \r\n  function routeToAdmin() {\r\n    history.push(\"/admin\");\r\n  } \r\n  function SwitchCase(props){\r\n    switch(props.role){\r\n      case \"basicUser\":\r\n        return \"\";\r\n      case \"admin\":\r\n        return (\r\n          <section className=\"header-p\" onClick={routeToAdmin}>\r\n            Admin\r\n          </section>\r\n        );\r\n      case \"moderator\":\r\n        return (\r\n          // <section className=\"header-p\" >\r\n          //   My Forums\r\n          // </section>\r\n          \"\"\r\n        );\r\n        default:\r\n          return\"\";\r\n    \r\n    }\r\n\r\n  }\r\n  return (\r\n    <div className=\"header-div\">\r\n      <section className=\"header-title\" onClick={routeToHomepage}>\r\n        Animal Forum\r\n      </section>\r\n      {loggedIn ? (\r\n        <div className=\"header-right-aligned\">\r\n          <SwitchCase role={role} />\r\n          <section className=\"header-p\" onClick={logout}>Logout</section>\r\n        </div>\r\n      ) : (\r\n        <div className=\"header-right-aligned\">\r\n          <section className=\"header-p\" onClick={routeToLogin}>\r\n            Login\r\n          </section>\r\n\r\n          <section className=\"header-p\" onClick={routeToRegister}>\r\n            Register\r\n          </section>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Header;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\RegisterAccount.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\LoginPage.js",[],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\ThreadPage.js",["78","79","80","81","82","83","84","85"],"C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\Post.js",["86"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, ListGroupItem } from \"reactstrap\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst Post = (props) => {\r\n  const forumContext = useContext(ForumContext);\r\n  const [user, setUser] = useState([]);\r\n  const [date, setDate] = useState([]);\r\n  \r\n\r\n\r\n  useEffect(() => {\r\n   formatDate();\r\n   fetchData();\r\n    \r\n  }, []);\r\n\r\n  const formatDate =() =>{\r\n    let date_ob = new Date(props.post.date);\r\n\r\n    let date = (\"0\" + date_ob.getDate()).slice(-2);\r\n\r\n    let month = (\"0\" + (date_ob.getMonth() + 1)).slice(-2);\r\n\r\n    let year = date_ob.getFullYear();\r\n\r\n    let hours = date_ob.getHours();\r\n\r\n    let minutes = date_ob.getMinutes();\r\n\r\n\r\n    setDate(\r\n      year +\r\n        \"-\" +\r\n        month +\r\n        \"-\" +\r\n        date +\r\n        \" \" +\r\n        hours +\r\n        \":\" +\r\n        minutes \r\n    );\r\n  }\r\n\r\n  async function deletePost(){\r\n      await fetch(\"/api/posts/\" + props.post.id, {\r\n       method: \"DELETE\"\r\n     });\r\n     forumContext.fetchPostsByThreadId(props.post.threadId);\r\n  }\r\n\r\n  async function fetchData(){\r\n\r\n     let response = await fetch(\"/api/users/\" + props.post.userId, {\r\n       method: \"GET\",\r\n       headers: { \"Content-Type\": \"application/json\" },\r\n     });\r\n     try {\r\n       response = await response.json();\r\n       setUser(response);\r\n     } catch {\r\n       console.log(\"Bad credentials\");\r\n     }\r\n\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <ListGroupItem className={props.post.type}>\r\n      <div className=\"post-top-row\">\r\n        <p className=\"post-creator\">{user.username}</p>\r\n        <p className=\"post-date\">{date}</p>\r\n      </div>\r\n      <div className=\"post-bottom-row\">\r\n        <p className=\"post-text\">{props.post.content}</p>\r\n        <Button className=\"post-delete-btn\" onClick={deletePost}>Delete</Button>\r\n      </div>\r\n    </ListGroupItem>\r\n  );\r\n};\r\nexport default Post;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\pages\\AdminPage.js",["87"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\nimport Card  from \"react-bootstrap/Card\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport User from \"../components/User\";\r\n\r\nconst AdminPage = (props) => {\r\n  const forumContext= useContext(ForumContext);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(()=>{\r\n    forumContext.fetchAllUsers();\r\n  },[]);\r\n  \r\n\r\n  // const fetchAllUsers = async ()=>{\r\n  //   let response = await fetch(\"/api/users\", {\r\n  //     method: \"GET\",\r\n  //     credentials: \"include\",\r\n  //   });\r\n  //   response = await response.json();\r\n\r\n  //   setUsers(response);\r\n\r\n  // }\r\n\r\n  useEffect(()=> {\r\n    setUsers(forumContext.users)\r\n    console.log(forumContext.users)\r\n  },[forumContext.users]);\r\n\r\n    return (\r\n      <div className=\"accordion-div\">\r\n        <Accordion>\r\n          <Card>\r\n            <Accordion.Toggle\r\n              as={Card.Header}\r\n              className=\"acc-header\"\r\n              eventKey=\"0\"\r\n            >\r\n              Users\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"0\">\r\n              <Card>\r\n                {users.map((u, i) => (\r\n                  <User user={u} key={i} />\r\n                ))}\r\n              </Card>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n          <Card>\r\n            <Accordion.Toggle\r\n              className=\"acc-header\"\r\n              as={Card.Header}\r\n              eventKey=\"1\"\r\n            >\r\n              Subforums\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n              <Card.Body>Hello! I'm another body</Card.Body>\r\n            </Accordion.Collapse>\r\n          </Card>\r\n        </Accordion>\r\n      </div>\r\n    );\r\n}\r\nexport default AdminPage;","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\User.js",["88","89","90","91","92"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { ListGroupItem, Button } from \"reactstrap\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\nimport EditModal from \"./EditModal\";\r\n\r\nconst User = (props) => {\r\n  const fc = useContext(ForumContext);\r\n  const [editType, setEditType] = useState(\"\");\r\n  const { className } = props;\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(props.user);\r\n  //   fc.fetchAllSubforums();\r\n  // }, []);\r\n\r\n  // const editUser=(props)=>{\r\n  //   console.log(editType);\r\n  // }\r\n  // const optionsArray = () => {\r\n  //   const options = [];\r\n  //   fc.subforums.forEach((sf) => {\r\n  //     options.push(<option key={sf.id}>{sf.title}</option>);\r\n  //   });\r\n  //   return options;\r\n  // };\r\n\r\n  if (props.user) {\r\n    return (\r\n      <div>\r\n        <ListGroupItem className=\"user-li\">\r\n          <span className=\"user-li-name\">{props.user.username}</span>\r\n          <Button className=\"edit-user-btn\" onClick={toggle}>\r\n            Edit\r\n          </Button>\r\n        </ListGroupItem>\r\n\r\n        {modal ? <EditModal user={props.user} modal={modal} toggle={toggle} /> : \"\"}\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\nexport default User;\r\n","C:\\Users\\Admin\\Desktop\\Javautveckling\\Java security\\AnimalForum\\frontend\\src\\components\\EditModal.js",["93","94","95"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  ListGroupItem,\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n  Badge,\r\n} from \"reactstrap\";\r\nimport { ForumContext } from \"../context/ForumContextProvider\";\r\nimport \"../index.css\";\r\n\r\nconst EditModal =(props)=>{\r\n  const fc = useContext(ForumContext);\r\n  const [editType, setEditType] = useState(\"\");\r\n  const [modForum, setModForum] = useState([]);\r\n  const { className } = props;\r\n\r\n  useEffect(() => {\r\n    console.log(props.user);\r\n    fc.fetchAllSubforums();\r\n    fc.fetchSubforumByModeratorId(props.user.id);\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    console.log(fc.currentModForums);\r\n  },[fc.currentModForums])\r\n\r\n  const editUser=async ()=>{\r\n    console.log(modForum);\r\n    let userId = props.user.id;\r\n    if(editType===\"admin\"){\r\n     await fc.changeUserRole(userId, editType);\r\n    }else if(editType ===\"moderator\"){\r\n      console.log(modForum);\r\n     await fc.addModeratorToSubforum(userId, modForum);\r\n    }else if(editType===\"removeModerator\"){\r\n      console.log(modForum);\r\n      await fc.removeModeratorfromSubforum(modForum, userId);\r\n      await fc.fetchSubforumByModeratorId(userId);\r\n      \r\n    }else if(editType===\"delete\"){\r\n     await fc.deleteUser(userId);\r\n\r\n    }\r\n    props.toggle();\r\n\r\n  }\r\n  useEffect(()=>{\r\n    updateUserRole();\r\n  },[fc.currentModForums])\r\n\r\n  const updateUserRole= async ()=>{\r\n    let forums = await fc.fetchAllModerators();\r\n    console.log(forums);\r\n    if(fc.currentModForums.length===0){\r\n      fc.changeUserRole(props.user.id, \"basicUser\");\r\n    }\r\n  };\r\n\r\n\r\n  const optionsArray = () => {\r\n    const options = [\r\n      <option disabled selected value>\r\n        {\" \"}\r\n        -- select an option --{\" \"}\r\n      </option>,\r\n    ];\r\n    fc.subforums.map((sf, i) => (\r\n      options.push(\r\n        <option key={sf.id} value={sf.id}>\r\n          {sf.title}\r\n        </option>\r\n      )\r\n    ));\r\n    return options;\r\n  };\r\n\r\n  const currentForumsArray = () => {\r\n    const options = [\r\n      <option disabled selected value>\r\n        {\" \"}\r\n        -- select an option --{\" \"}\r\n      </option>,\r\n    ];\r\n    // console.log(fc.currentModForums.filter((f) => f.id));\r\n    fc.currentModForums\r\n      .filter((cf) => cf.id)\r\n      .map((cf, i) =>\r\n        options.push(\r\n          <option key={cf.id} value={cf.id}>\r\n            {cf.title}\r\n          </option>\r\n        )\r\n      );\r\n    return options;\r\n  };\r\n\r\n  return (\r\n    <Modal isOpen={props.modal} toggle={props.toggle} className={className}>\r\n      <ModalHeader toggle={props.toggle}>Edit user</ModalHeader>\r\n      <ModalBody>\r\n        {props.user.userRole !== \"admin\" ?(\r\n        <FormGroup check>\r\n          <Label check>\r\n            <Input\r\n              type=\"radio\"\r\n              name=\"radio1\"\r\n              onChange={() => setEditType(\"admin\")}\r\n            />\r\n            Make user admin\r\n          </Label>\r\n        </FormGroup>\r\n        ):(\"\")}\r\n        {props.user.userRole === \"moderator\" ? (\r\n          <FormGroup check>\r\n            <Label check>\r\n              <Input\r\n                type=\"radio\"\r\n                name=\"radio1\"\r\n                onChange={() => setEditType(\"removeModerator\")}\r\n              />\r\n              Remove moderator role from user\r\n            </Label>\r\n            <FormGroup>\r\n              <Label for=\"exampleSelect\">for subforum:</Label>\r\n              <Input\r\n                type=\"select\"\r\n                onChange={(e) => setModForum(e.target.value)}\r\n              >\r\n                {currentForumsArray()}\r\n              </Input>\r\n            </FormGroup>\r\n          </FormGroup>\r\n        ) : (\"\")}\r\n        {props.user.userRole !== \"admin\" ? (\r\n          <FormGroup check>\r\n            <Label check>\r\n              <Input\r\n                type=\"radio\"\r\n                name=\"radio1\"\r\n                onChange={() => setEditType(\"moderator\")}\r\n              />\r\n              Make user moderator of\r\n            </Label>\r\n            <FormGroup>\r\n              <Label for=\"exampleSelect\">subforum:</Label>\r\n              <Input\r\n                type=\"select\"\r\n                onChange={(e) => setModForum(e.target.value)}\r\n              >\r\n                {optionsArray()}\r\n              </Input>\r\n            </FormGroup>\r\n          </FormGroup>\r\n          ):(\"\")}\r\n        <Badge color=\"danger\" className=\"danger-badge\">\r\n          <FormGroup className=\"delete-radio-btn\" check>\r\n            <Label check>\r\n              <Input\r\n                type=\"radio\"\r\n                name=\"radio1\"\r\n                onChange={() => setEditType(\"delete\")}\r\n              />\r\n              Delete user\r\n            </Label>\r\n          </FormGroup>\r\n        </Badge>\r\n        <FormGroup>\r\n          <Button\r\n            className=\"confirm-btn\"\r\n            color=\"secondary\"\r\n            onClick={() => editUser()}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </FormGroup>\r\n      </ModalBody>\r\n    </Modal>\r\n  );\r\n}\r\nexport default EditModal;",{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":8,"column":22,"nodeType":"102","messageId":"103","endLine":8,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":12,"column":5,"nodeType":"106","endLine":12,"endColumn":7,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":19,"column":6,"nodeType":"106","endLine":19,"endColumn":8,"suggestions":"109"},{"ruleId":"100","severity":1,"message":"110","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":16},{"ruleId":"104","severity":1,"message":"111","line":17,"column":5,"nodeType":"106","endLine":17,"endColumn":30,"suggestions":"112"},{"ruleId":"100","severity":1,"message":"113","line":13,"column":10,"nodeType":"102","messageId":"103","endLine":13,"endColumn":16},{"ruleId":"100","severity":1,"message":"114","line":17,"column":10,"nodeType":"102","messageId":"103","endLine":17,"endColumn":19},{"ruleId":"100","severity":1,"message":"115","line":17,"column":21,"nodeType":"102","messageId":"103","endLine":17,"endColumn":33},{"ruleId":"104","severity":1,"message":"116","line":30,"column":6,"nodeType":"106","endLine":30,"endColumn":8,"suggestions":"117"},{"ruleId":"104","severity":1,"message":"118","line":50,"column":6,"nodeType":"106","endLine":50,"endColumn":12,"suggestions":"119"},{"ruleId":"104","severity":1,"message":"120","line":54,"column":6,"nodeType":"106","endLine":54,"endColumn":37,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":75,"column":27,"nodeType":"124","messageId":"125","endLine":75,"endColumn":29},{"ruleId":"104","severity":1,"message":"126","line":110,"column":6,"nodeType":"106","endLine":110,"endColumn":14,"suggestions":"127"},{"ruleId":"104","severity":1,"message":"128","line":17,"column":6,"nodeType":"106","endLine":17,"endColumn":8,"suggestions":"129"},{"ruleId":"104","severity":1,"message":"130","line":14,"column":5,"nodeType":"106","endLine":14,"endColumn":7,"suggestions":"131"},{"ruleId":"100","severity":1,"message":"132","line":1,"column":29,"nodeType":"102","messageId":"103","endLine":1,"endColumn":38},{"ruleId":"100","severity":1,"message":"133","line":8,"column":9,"nodeType":"102","messageId":"103","endLine":8,"endColumn":11},{"ruleId":"100","severity":1,"message":"134","line":9,"column":10,"nodeType":"102","messageId":"103","endLine":9,"endColumn":18},{"ruleId":"100","severity":1,"message":"135","line":9,"column":20,"nodeType":"102","messageId":"103","endLine":9,"endColumn":31},{"ruleId":"100","severity":1,"message":"136","line":10,"column":11,"nodeType":"102","messageId":"103","endLine":10,"endColumn":20},{"ruleId":"100","severity":1,"message":"137","line":3,"column":3,"nodeType":"102","messageId":"103","endLine":3,"endColumn":16},{"ruleId":"104","severity":1,"message":"138","line":26,"column":6,"nodeType":"106","endLine":26,"endColumn":8,"suggestions":"139"},{"ruleId":"104","severity":1,"message":"140","line":54,"column":5,"nodeType":"106","endLine":54,"endColumn":26,"suggestions":"141"},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'setModerators' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'formatDate', 'getCreator', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["144"],"React Hook useEffect has missing dependencies: 'fetchAllThreadsFromSubforum' and 'fetchData'. Either include them or remove the dependency array.",["145"],"'Switch' is defined but never used.","React Hook useEffect has a missing dependency: 'getUserRole'. Either include it or remove the dependency array.",["146"],"'thread' is assigned a value but never used.","'modForums' is assigned a value but never used.","'setModForums' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'fetchData' and 'forumContext.thread'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has a missing dependency: 'fetchModForums'. Either include it or remove the dependency array.",["148"],"React Hook useEffect has a missing dependency: 'checkUserPriv'. Either include it or remove the dependency array.",["149"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'postEnabled' and 'user'. Either include them or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'fetchData' and 'formatDate'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'forumContext'. Either include it or remove the dependency array.",["152"],"'useEffect' is defined but never used.","'fc' is assigned a value but never used.","'editType' is assigned a value but never used.","'setEditType' is assigned a value but never used.","'className' is assigned a value but never used.","'ListGroupItem' is defined but never used.","React Hook useEffect has missing dependencies: 'fc' and 'props.user'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has a missing dependency: 'updateUserRole'. Either include it or remove the dependency array.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},"Update the dependencies array to be: [formatDate, getCreator, props]",{"range":"177","text":"178"},"Update the dependencies array to be: [fetchAllThreadsFromSubforum, fetchData]",{"range":"179","text":"180"},"Update the dependencies array to be: [forumContext.isLoggedIn, getUserRole]",{"range":"181","text":"182"},"Update the dependencies array to be: [fetchData, forumContext.thread]",{"range":"183","text":"184"},"Update the dependencies array to be: [fetchModForums, user]",{"range":"185","text":"186"},"Update the dependencies array to be: [checkUserPriv, forumContext.currentModForums]",{"range":"187","text":"188"},"Update the dependencies array to be: [isOpen, postEnabled, user]",{"range":"189","text":"190"},"Update the dependencies array to be: [fetchData, formatDate]",{"range":"191","text":"192"},"Update the dependencies array to be: [forumContext]",{"range":"193","text":"194"},"Update the dependencies array to be: [fc, props.user]",{"range":"195","text":"196"},"Update the dependencies array to be: [fc.currentModForums, updateUserRole]",{"range":"197","text":"198"},[284,286],"[formatDate, getCreator, props]",[697,699],"[fetchAllThreadsFromSubforum, fetchData]",[512,537],"[forumContext.isLoggedIn, getUserRole]",[1176,1178],"[fetchData, forumContext.thread]",[1680,1686],"[fetchModForums, user]",[1740,1771],"[checkUserPriv, forumContext.currentModForums]",[3314,3322],"[isOpen, postEnabled, user]",[443,445],"[fetchData, formatDate]",[475,477],"[forumContext]",[638,640],"[fc, props.user]",[1382,1403],"[fc.currentModForums, updateUserRole]"]